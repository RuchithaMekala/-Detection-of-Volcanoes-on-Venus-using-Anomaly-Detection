{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"19SIs2RpDusdEMT0BEwcd217xkjEOputP","timestamp":1682103984027}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Uh28hgmz_wiw"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","from matplotlib import pyplot as plt\n","\n","vol_data_norm = pd.read_csv(\"/content/drive/MyDrive/Data_Mining_Project/anom_data/Volcanoes.csv\")\n","nonvol_data_norm = pd.read_csv(\"/content/drive/MyDrive/Data_Mining_Project/anom_data/NonVolcanoes.csv\")"]},{"cell_type":"code","source":["vol_data_norm = vol_data_norm.drop(columns=[vol_data_norm.columns[0], vol_data_norm.columns[-1]])\n","nonvol_data_norm = nonvol_data_norm.drop(columns=[nonvol_data_norm.columns[0], nonvol_data_norm.columns[-1]])\n","\n","vol_data = vol_data_norm.multiply(255)\n","nonvol_data = nonvol_data_norm.multiply(255)\n","\n","vol_data = vol_data.astype(int)\n","nonvol_data = nonvol_data.astype(int)"],"metadata":{"id":"dlHOyRvF_25F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["indices = np.random.choice(nonvol_data.shape[0], size=1419, replace=False)\n","nonvol_data_test = nonvol_data.iloc[indices]\n","\n","# store the rest of the rows in another variable\n","nonvol_data_train = nonvol_data.iloc[~np.isin(np.arange(nonvol_data.shape[0]), indices)]\n","nonvol_data_train.shape"],"metadata":{"id":"WGKr4FS__7RA","executionInfo":{"status":"ok","timestamp":1682104132766,"user_tz":420,"elapsed":1022,"user":{"displayName":"Ruchitha Mekala","userId":"10912045661170377025"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"4f7ffdc4-8617-4401-b8f2-c35cfc6a2b1d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(6608, 12100)"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["import tensorflow as tf\n","tf.keras.utils.set_random_seed(0)\n","\n","import keras\n","from keras import layers\n"],"metadata":{"id":"24RPGtU1AChW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def mse(x, x_recon):\n","    return np.mean(np.subtract(x, x_recon)**2)"],"metadata":{"id":"N5hpQk4nAS1i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def autoencoders(encoding_dim):   \n","\n","  # This is our input image\n","  input_img = keras.Input(shape=(nonvol_data_train.shape[1],))\n","  # \"encoded\" is the encoded representation of the input\n","  encoded = layers.Dense(54, activation='relu')(input_img)\n","  encoded = layers.Dense(28, activation='relu')(encoded)\n","  encoded = layers.Dense(encoding_dim, activation='relu')(encoded)\n","\n","  # \"decoded\" is the lossy reconstruction of the input\n","  decoded = layers.Dense(28, activation='relu')(encoded)\n","  decoded = layers.Dense(54, activation='relu')(decoded)\n","  decoded = layers.Dense(nonvol_data_train.shape[1], activation='sigmoid')(decoded)\n","\n","  # This model maps an input to its reconstruction\n","  autoencoder = keras.Model(input_img, decoded)\n","\n","  encoder = keras.Model(input_img, encoded)\n","  autoencoder.compile(optimizer='sgd', loss='mse')\n","  autoencoder.fit(x=nonvol_data_train, y=nonvol_data_train,\n","                  epochs=40,\n","                  batch_size=256,\n","                  shuffle=True)\n","  return autoencoder"],"metadata":{"id":"95nehskLADFp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def error(df, autoencoder):\n","  #df_pca_recon=pca.inverse_transform(df_pca)\n","  decoded_data = autoencoder.predict(df)\n","  df_arr = df.values\n","  mse_error=[]\n","  for i in range(len(df)):\n","    mse_error.append(mse(df_arr[i],decoded_data[i]))\n","  plt.hist(mse_error)\n","  return mse_error"],"metadata":{"id":"ynxu2Wc_ATR7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ae = autoencoders(5)\n","nonvol_data_train_error = error(nonvol_data_train, ae)\n","nonvol_data_test_error = error(nonvol_data_test, ae)\n","vol_data_error = error(vol_data, ae)"],"metadata":{"id":"CvWSSvTPC5jj","executionInfo":{"status":"ok","timestamp":1682104610797,"user_tz":420,"elapsed":154040,"user":{"displayName":"Ruchitha Mekala","userId":"10912045661170377025"}},"colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"f7f9da08-9f08-4d5b-a8f3-6a4ec91ecdca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/40\n","26/26 [==============================] - 7s 187ms/step - loss: 10803.2891\n","Epoch 2/40\n","26/26 [==============================] - 6s 225ms/step - loss: 10791.3721\n","Epoch 3/40\n","26/26 [==============================] - 4s 134ms/step - loss: 10788.6250\n","Epoch 4/40\n","26/26 [==============================] - 2s 95ms/step - loss: 10788.2129\n","Epoch 5/40\n","26/26 [==============================] - 2s 94ms/step - loss: 10787.8389\n","Epoch 6/40\n","26/26 [==============================] - 2s 95ms/step - loss: 10787.6553\n","Epoch 7/40\n","26/26 [==============================] - 3s 135ms/step - loss: 10787.4854\n","Epoch 8/40\n","26/26 [==============================] - 3s 132ms/step - loss: 10787.3145\n","Epoch 9/40\n","26/26 [==============================] - 3s 97ms/step - loss: 10787.1758\n","Epoch 10/40\n","26/26 [==============================] - 2s 96ms/step - loss: 10787.0723\n","Epoch 11/40\n","26/26 [==============================] - 2s 94ms/step - loss: 10786.9580\n","Epoch 12/40\n","26/26 [==============================] - 3s 124ms/step - loss: 10786.7227\n","Epoch 13/40\n","26/26 [==============================] - 4s 148ms/step - loss: 10786.6260\n","Epoch 14/40\n","26/26 [==============================] - 3s 97ms/step - loss: 10786.5322\n","Epoch 15/40\n","26/26 [==============================] - 2s 96ms/step - loss: 10786.4346\n","Epoch 16/40\n","26/26 [==============================] - 2s 96ms/step - loss: 10786.3281\n","Epoch 17/40\n","26/26 [==============================] - 3s 104ms/step - loss: 10786.2871\n","Epoch 18/40\n","26/26 [==============================] - 4s 159ms/step - loss: 10786.2334\n","Epoch 19/40\n","26/26 [==============================] - 3s 98ms/step - loss: 10786.2031\n","Epoch 20/40\n","26/26 [==============================] - 2s 94ms/step - loss: 10786.1582\n","Epoch 21/40\n","26/26 [==============================] - 2s 94ms/step - loss: 10786.1416\n","Epoch 22/40\n","26/26 [==============================] - 2s 95ms/step - loss: 10786.1113\n","Epoch 23/40\n","26/26 [==============================] - 4s 147ms/step - loss: 10786.0459\n","Epoch 24/40\n","26/26 [==============================] - 3s 117ms/step - loss: 10786.0137\n","Epoch 25/40\n","26/26 [==============================] - 2s 93ms/step - loss: 10786.0059\n","Epoch 26/40\n","26/26 [==============================] - 2s 95ms/step - loss: 10785.9902\n","Epoch 27/40\n","26/26 [==============================] - 2s 95ms/step - loss: 10785.9893\n","Epoch 28/40\n","26/26 [==============================] - 3s 129ms/step - loss: 10785.9756\n","Epoch 29/40\n","26/26 [==============================] - 4s 133ms/step - loss: 10785.9707\n","Epoch 30/40\n","26/26 [==============================] - 3s 98ms/step - loss: 10785.9434\n","Epoch 31/40\n","26/26 [==============================] - 2s 93ms/step - loss: 10785.8955\n","Epoch 32/40\n","26/26 [==============================] - 2s 93ms/step - loss: 10785.8672\n","Epoch 33/40\n","26/26 [==============================] - 4s 171ms/step - loss: 10785.8291\n","Epoch 34/40\n","26/26 [==============================] - 4s 149ms/step - loss: 10785.8027\n","Epoch 35/40\n","26/26 [==============================] - 3s 98ms/step - loss: 10785.7891\n","Epoch 36/40\n","26/26 [==============================] - 3s 96ms/step - loss: 10785.7842\n","Epoch 37/40\n","26/26 [==============================] - 3s 114ms/step - loss: 10785.7695\n","Epoch 38/40\n","26/26 [==============================] - 3s 121ms/step - loss: 10785.7695\n","Epoch 39/40\n","26/26 [==============================] - 4s 142ms/step - loss: 10785.7607\n","Epoch 40/40\n","26/26 [==============================] - 2s 94ms/step - loss: 10785.7539\n","207/207 [==============================] - 2s 10ms/step\n","45/45 [==============================] - 0s 8ms/step\n","45/45 [==============================] - 1s 13ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def metrics(nonvol_data_train_error, nonvol_data_test_error, vol_data_error, threshold):\n","  train_err_count = 0\n","  for i in nonvol_data_train_error:\n","    if i < threshold:\n","      train_err_count+=1\n","  train_acc = train_err_count/len(nonvol_data_train_error)\n","  #FP = len(nonvol_data_train_error) - TN\n","  TN = 0\n","  for i in nonvol_data_test_error:\n","    if i > threshold:\n","      TN+=1\n","  TP = 0\n","  for i in vol_data_error:\n","    if i > threshold:\n","      TP+=1\n","  FP = len(nonvol_data_test_error) - TN\n","  FN = len(vol_data_error) - TP\n","  return TP, TN, FP, FN, train_acc"],"metadata":{"id":"ZKSUMZaZA2zV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# TP, TN, FP, FN, train_acc = metrics(nonvol_data_train_error, nonvol_data_test_error, vol_data_error, 10000)"],"metadata":{"id":"ldSJ9WnsLMg7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\"\"\"recall = TP / (TP + FN)\n","precision = TP / (TP + FP)\n","f1_score = (2 * (Precision * Recall) )/ (Precision + Recall)\n","print(\"Training Accuracy: \", train_acc, \"Precision: \", precision, \" Recall: \", recall, \" F1 Score: \", f1_acore)\"\"\""],"metadata":{"id":"YN7bziHuLari","executionInfo":{"status":"ok","timestamp":1682104610800,"user_tz":420,"elapsed":13,"user":{"displayName":"Ruchitha Mekala","userId":"10912045661170377025"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0fd4bcee-35ff-4a47-bdbc-116f26fb4965"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Precision:  0.4952029520295203  Recall:  0.4728682170542636\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"RjAhymJaWf6a"}},{"cell_type":"code","source":["def met(threshold):\n","  TP, TN, FP, FN, train_acc = metrics(nonvol_data_train_error, nonvol_data_test_error, vol_data_error, threshold)\n","  recall = TP / (TP + FN)\n","  precision = TP / (TP + FP)\n","  f1_score = (2 * (precision * recall) )/ (precision + recall)\n","  print(\"Threshold: \",threshold, \" Training Accuracy: \", train_acc, \" Precision: \", precision, \" Recall: \", recall, \" F1 Score: \", f1_score)"],"metadata":{"id":"_qMn35VsWeMm"},"execution_count":null,"outputs":[]}]}